import { MoreThanOrEqual, LessThanOrEqual } from 'typeorm';
import { OpportunityEntitySchema } from '@/apis/opportunity/opportunity.schema';
import { publishOpportunityJob } from './publish-opportunity.job';
import { AppDataSource } from '../databases';
import { JobStatus } from '@/utils/helpers/constants';
import cron from 'node-cron'; // ‚úÖ Ajout ici

export const schedulePendingOpportunities = async () => {
  const repo = AppDataSource.getRepository(OpportunityEntitySchema);
  const now = new Date();

  console.log('[StartupJobs] V√©rification des opportunit√©s √† publier...');

  // üìå Opportunit√©s d√©j√† d√©pass√©es mais non publi√©es ‚Üí publier maintenant
  const toPublishNow = await repo.find({
    where: {
      isPublished: false,
      publishAt: LessThanOrEqual(now),
    },
  });

  for (const opp of toPublishNow) {
    const hasDraftVisibility = opp.OpportunityVersions?.some(v => v.visibility === 'Draft');

    if (hasDraftVisibility) {
      console.log(`[StartupJobs] ‚ö†Ô∏è Opportunit√© ID ${opp.id} NON publi√©e car en mode brouillon.`);
      continue;
    }

    opp.isPublished = true;
    await repo.save(opp);
    console.log(`[StartupJobs] ‚úÖ Opportunit√© ID ${opp.id} publi√©e imm√©diatement (retard de planification).`);
  }

  // üìå Opportunit√©s √† planifier dans le futur
  const toSchedule = await repo.find({
    where: {
      isPublished: false,
      publishAt: MoreThanOrEqual(now),
    },
  });

  for (const opp of toSchedule) {
    if (opp.id && opp.publishAt) {
      console.log(`[StartupJobs] ‚è≥ Planification de l‚Äôopportunit√© ID ${opp.id} pour ${opp.publishAt}`);
      await publishOpportunityJob.schedule(opp.id, opp.publishAt);
    }
  }

  // üìå Opportunit√©s expir√©es ‚Üí mettre √† jour leur statut
  const expiredOpportunities = await repo.find({
    where: {
      dateOfExpiration: LessThanOrEqual(now),
      status: JobStatus.ACTIVE,
    },
  });

  for (const opp of expiredOpportunities) {
    opp.status = JobStatus.EXPIRED;
    await repo.save(opp);
    console.log(`[StartupJobs] ‚ùå Opportunit√© ID ${opp.id} expir√©e ‚Üí statut mis √† jour.`);
  }

  console.log('[StartupJobs] ‚úÖ V√©rifications de publication et d‚Äôexpiration termin√©es.');
};

// ‚úÖ Lancement automatique toutes les 6 heures
cron.schedule('0 */6 * * *', async () => {
  console.log('[CRON] ‚è∞ Lancement automatique du job de publication/expiration...');
  await schedulePendingOpportunities();
});
