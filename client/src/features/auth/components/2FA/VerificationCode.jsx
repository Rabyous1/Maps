'use client';

import React, { useRef } from 'react';
import { Typography } from '@mui/material';
import { useSearchParams, useRouter } from 'next/navigation';
import * as Yup from 'yup';
import { useVerifyOtp } from '@/features/auth/hooks/auth.hooks';
import GenericFormikForm from '@/components/form/GenericFormikForm';
import GenericAlert from '@/components/ui/feedback/Alert';
import { verifyOtpFields } from './otp.fields';

export default function VerifyOtp({ styles }) {
  const router = useRouter();
  const searchParams = useSearchParams();
  const userId = searchParams.get('userId');
  const inputRefs = useRef([]);
  const { mutate: verifyOtp, isLoading } = useVerifyOtp();

  const initialValues = {
    otp: ['', '', '', '', '', ''],
  };

  const validationSchema = Yup.object({
    otp: Yup.array()
      .of(Yup.string().matches(/^\d$/, 'Must be a digit').required('Required'))
      .length(6, 'OTP must be 6 digits'),
  });

  const handleSubmit = (values, formikHelpers) => {
  const { resetForm } = formikHelpers;

  if (!userId) {
    console.error('Missing userId');
    return;
  }

  const code = values.otp.join('');
  verifyOtp(
    { userId, otpCode: code },
    {
      onSuccess: () => {
        localStorage.removeItem("2fa_pending");
        resetForm();
        router.push("/dashboard/home");
      },
    }
  );
};


  if (!userId) {
    return (
      <div className={styles.container}>
        <Typography variant="h6" color="error">
          Invalid or missing user identifier.
        </Typography>
      </div>
    );
  }

  return (
    <>
      <div className={styles.container}>
        <Typography variant="h4" className={styles.title}>
          Verification
        </Typography>
        <Typography className={styles.subtitle}>
          Enter 6 digits validation code generated by the app
        </Typography>

        <GenericFormikForm
          styles={styles}
          initialValues={initialValues}
          validationSchema={validationSchema}
          onSubmit={handleSubmit}
          fields={verifyOtpFields}
          submitText="Continue"
          submitFullWidth={true}
          customRenderFields={({ values, setFieldValue }) => (
            <div className={styles.otpInputs}>
              {values.otp.map((digit, idx) => (
                <input
  key={idx}
  type="text"
  name={`otp[${idx}]`}
  maxLength="1"
  value={digit}
  placeholder="-"
  onChange={(e) => {
    const value = e.target.value;
    if (!/^\d?$/.test(value)) return;

    const newOtp = [...values.otp];
    newOtp[idx] = value;
    setFieldValue('otp', newOtp);

    if (value && idx < 5) {
      inputRefs.current[idx + 1]?.focus();
    }
  }}
  onKeyDown={(e) => {
    if (e.key === 'Backspace' && !values.otp[idx] && idx > 0) {
      inputRefs.current[idx - 1]?.focus();
    }
  }}
  onPaste={idx === 0 ? (e) => {
    e.preventDefault();
    const pasted = e.clipboardData.getData('Text').replace(/\D/g, '').slice(0, 6);
    if (pasted.length === 6) {
      const otpArray = pasted.split('');
      setFieldValue('otp', otpArray);
      inputRefs.current[5]?.focus();
    }
  } : undefined}
  ref={(el) => (inputRefs.current[idx] = el)}
  className={`${styles.otpInput} ${!digit ? styles.empty : ''}`}
/>

              ))}
            </div>
          )}
        />

        <button onClick={() => router.back()} className={styles.backButton}>
          ‚Üê Back
        </button>
      </div>

      <GenericAlert />
    </>
  );
}
